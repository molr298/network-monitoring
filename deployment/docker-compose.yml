version: '3.8'

services:
  # Zabbix Server
  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-6.0-latest
    container_name: zabbix-server
    ports:
      - "10051:10051"
    environment:
      - DB_SERVER_HOST=postgres
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix
      - POSTGRES_DB=zabbix
    volumes:
      - ./zabbix/alertscripts:/usr/lib/zabbix/alertscripts
      - ./zabbix/externalscripts:/usr/lib/zabbix/externalscripts
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - monitoring

  # Zabbix Web Interface
  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-6.0-latest
    container_name: zabbix-web
    ports:
      - "8080:8080"
    environment:
      - ZBX_SERVER_HOST=zabbix-server
      - DB_SERVER_HOST=postgres
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix
      - POSTGRES_DB=zabbix
      - PHP_TZ=UTC
    depends_on:
      - zabbix-server
      - postgres
    restart: unless-stopped
    networks:
      - monitoring

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: zabbix-postgres
    environment:
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix
      - POSTGRES_DB=zabbix
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zabbix -d zabbix"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - monitoring

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - DATABASE_URL=postgresql://zabbix:zabbix@postgres:5432/zabbix
      - ZABBIX_SERVER=zabbix-server
      - ZABBIX_USER=Admin
      - ZABBIX_PASSWORD=zabbix
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}
      - TZ=${TZ:-UTC}
    depends_on:
      postgres:
        condition: service_healthy
      zabbix-server:
        condition: service_started
    restart: unless-stopped
    networks:
      - monitoring

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  postgres_data:
